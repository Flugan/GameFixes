;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
; ATTRIBUTE                1   xy          1     NONE   float   xy  
; ATTRIBUTE                2   xy          2     NONE   float   xy  
; ATTRIBUTE                3   xyzw        3     NONE   float   xyzw
; ATTRIBUTE                4   xyzw        4     NONE   float   xyzw
; ATTRIBUTE                5   xy          5     NONE    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; COLOR                    0   xyzw        1     NONE   float   xyzw
; COLOR                    1   xyzw        2     NONE   float   xyzw
; ORIGINAL_POSITION        0   xyzw        3     NONE   float   xyzw
; TEXCOORD                 0   xyzw        4     NONE   float   xyzw
; TEXCOORD                 1   xyzw        5     NONE   float   xyzw
;
; shader hash: 4a733cbdbd11688a26ae12020f827f4f
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; ATTRIBUTE                0                              
; ATTRIBUTE                1                              
; ATTRIBUTE                2                              
; ATTRIBUTE                3                              
; ATTRIBUTE                4                              
; ATTRIBUTE                5                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; ORIGINAL_POSITION        0                 linear       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct hostlayout.$Globals
;   {
;
;       row_major float4x4 ViewProjection;            ; Offset:    0
;   
;   } $Globals;                                       ; Offset:    0 Size:    64
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 22, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8, 9 }
;   output 1 depends on inputs: { 8, 9 }
;   output 2 depends on inputs: { 8, 9 }
;   output 3 depends on inputs: { 8, 9 }
;   output 4 depends on inputs: { 12 }
;   output 5 depends on inputs: { 13 }
;   output 6 depends on inputs: { 14 }
;   output 7 depends on inputs: { 15 }
;   output 8 depends on inputs: { 16 }
;   output 9 depends on inputs: { 17 }
;   output 10 depends on inputs: { 18 }
;   output 11 depends on inputs: { 19 }
;   output 12 depends on inputs: { 8 }
;   output 13 depends on inputs: { 9 }
;   output 16 depends on inputs: { 4 }
;   output 17 depends on inputs: { 5 }
;   output 18 depends on inputs: { 8, 9 }
;   output 19 depends on inputs: { 8, 9 }
;   output 20 depends on inputs: { 0 }
;   output 21 depends on inputs: { 1 }
;   output 22 depends on inputs: { 2 }
;   output 23 depends on inputs: { 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"hostlayout.$Globals" = type { [4 x <4 x float>] }

define void @Main() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %7)  ; FMax(a,b)
  %20 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %8)  ; FMax(a,b)
  %21 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %9)  ; FMax(a,b)
  %22 = fmul fast float %19, 0x3FB3D07220000000
  %23 = fmul fast float %20, 0x3FB3D07220000000
  %24 = fmul fast float %21, 0x3FB3D07220000000
  %25 = fmul fast float %19, 0x3FEE54EDC0000000
  %26 = fmul fast float %20, 0x3FEE54EDC0000000
  %27 = fmul fast float %21, 0x3FEE54EDC0000000
  %28 = fadd fast float %25, 0x3FAAB12320000000
  %29 = fadd fast float %26, 0x3FAAB12320000000
  %30 = fadd fast float %27, 0x3FAAB12320000000
  %31 = call float @dx.op.unary.f32(i32 23, float %28)  ; Log(value)
  %32 = call float @dx.op.unary.f32(i32 23, float %29)  ; Log(value)
  %33 = call float @dx.op.unary.f32(i32 23, float %30)  ; Log(value)
  %34 = fmul fast float %31, 0x4003333340000000
  %35 = fmul fast float %32, 0x4003333340000000
  %36 = fmul fast float %33, 0x4003333340000000
  %37 = call float @dx.op.unary.f32(i32 21, float %34)  ; Exp(value)
  %38 = call float @dx.op.unary.f32(i32 21, float %35)  ; Exp(value)
  %39 = call float @dx.op.unary.f32(i32 21, float %36)  ; Exp(value)
  %40 = fcmp fast ogt float %19, 0x3FA4B5DCC0000000
  %41 = fcmp fast ogt float %20, 0x3FA4B5DCC0000000
  %42 = fcmp fast ogt float %21, 0x3FA4B5DCC0000000
  %43 = select i1 %40, float %37, float %22
  %44 = select i1 %41, float %38, float %23
  %45 = select i1 %42, float %39, float %24
  %46 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %3)  ; FMax(a,b)
  %47 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %4)  ; FMax(a,b)
  %48 = call float @dx.op.binary.f32(i32 35, float 0x3F100000C0000000, float %5)  ; FMax(a,b)
  %49 = fmul fast float %46, 0x3FB3D07220000000
  %50 = fmul fast float %47, 0x3FB3D07220000000
  %51 = fmul fast float %48, 0x3FB3D07220000000
  %52 = fmul fast float %46, 0x3FEE54EDC0000000
  %53 = fmul fast float %47, 0x3FEE54EDC0000000
  %54 = fmul fast float %48, 0x3FEE54EDC0000000
  %55 = fadd fast float %52, 0x3FAAB12320000000
  %56 = fadd fast float %53, 0x3FAAB12320000000
  %57 = fadd fast float %54, 0x3FAAB12320000000
  %58 = call float @dx.op.unary.f32(i32 23, float %55)  ; Log(value)
  %59 = call float @dx.op.unary.f32(i32 23, float %56)  ; Log(value)
  %60 = call float @dx.op.unary.f32(i32 23, float %57)  ; Log(value)
  %61 = fmul fast float %58, 0x4003333340000000
  %62 = fmul fast float %59, 0x4003333340000000
  %63 = fmul fast float %60, 0x4003333340000000
  %64 = call float @dx.op.unary.f32(i32 21, float %61)  ; Exp(value)
  %65 = call float @dx.op.unary.f32(i32 21, float %62)  ; Exp(value)
  %66 = call float @dx.op.unary.f32(i32 21, float %63)  ; Exp(value)
  %67 = fcmp fast ogt float %46, 0x3FA4B5DCC0000000
  %68 = fcmp fast ogt float %47, 0x3FA4B5DCC0000000
  %69 = fcmp fast ogt float %48, 0x3FA4B5DCC0000000
  %70 = select i1 %67, float %64, float %49
  %71 = select i1 %68, float %65, float %50
  %72 = select i1 %69, float %66, float %51
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = extractvalue %dx.types.CBufRet.f32 %78, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %86 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %87 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %88 = fmul fast float %74, %11
  %89 = call float @dx.op.tertiary.f32(i32 46, float %12, float %79, float %88)  ; FMad(a,b,c)
  %90 = fadd fast float %84, %89
  %91 = fmul fast float %75, %11
  %92 = call float @dx.op.tertiary.f32(i32 46, float %12, float %80, float %91)  ; FMad(a,b,c)
  %93 = fadd fast float %92, %85
  %94 = fmul fast float %76, %11
  %95 = call float @dx.op.tertiary.f32(i32 46, float %12, float %81, float %94)  ; FMad(a,b,c)
  %96 = fadd fast float %95, %86
  %97 = fmul fast float %77, %11
  %98 = call float @dx.op.tertiary.f32(i32 46, float %12, float %82, float %97)  ; FMad(a,b,c)
  %99 = fadd fast float %98, %87
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %90)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %93)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %96)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %99)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %43)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %44)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %45)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %70)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %71)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %72)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %90)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %93)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %"hostlayout.$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 64, null}
!7 = !{[24 x i32] [i32 22, i32 24, i32 1048576, i32 2097152, i32 4194304, i32 8388608, i32 65536, i32 131072, i32 0, i32 0, i32 790543, i32 794639, i32 0, i32 0, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 0, i32 0]}
!8 = !{void ()* @Main, !"Main", !9, !4, !32}
!9 = !{!10, !25, null}
!10 = !{!11, !14, !17, !19, !21, !23}
!11 = !{i32 0, !"ATTRIBUTE", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"ATTRIBUTE", i8 9, i8 0, !15, i8 0, i32 1, i8 2, i32 1, i8 0, !16}
!15 = !{i32 1}
!16 = !{i32 3, i32 3}
!17 = !{i32 2, !"ATTRIBUTE", i8 9, i8 0, !18, i8 0, i32 1, i8 2, i32 2, i8 0, !16}
!18 = !{i32 2}
!19 = !{i32 3, !"ATTRIBUTE", i8 9, i8 0, !20, i8 0, i32 1, i8 4, i32 3, i8 0, !13}
!20 = !{i32 3}
!21 = !{i32 4, !"ATTRIBUTE", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 4, i8 0, !13}
!22 = !{i32 4}
!23 = !{i32 5, !"ATTRIBUTE", i8 5, i8 0, !24, i8 0, i32 1, i8 2, i32 5, i8 0, null}
!24 = !{i32 5}
!25 = !{!26, !27, !28, !29, !30, !31}
!26 = !{i32 0, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 0, i8 0, !13}
!27 = !{i32 1, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!28 = !{i32 2, !"COLOR", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 2, i8 0, !13}
!29 = !{i32 3, !"ORIGINAL_POSITION", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 3, i8 0, !13}
!30 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 4, i8 0, !13}
!31 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 5, i8 0, !13}
!32 = !{i32 5, !12}
 