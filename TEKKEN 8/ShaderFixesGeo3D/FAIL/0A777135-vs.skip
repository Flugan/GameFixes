;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
; ATTRIBUTE                1   xyz         1     NONE   float   xyz 
; ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
; ATTRIBUTE                3   xyzw        3     NONE    uint   xyzw
; ATTRIBUTE               14   xyzw        4     NONE    uint   xyzw
; ATTRIBUTE                4   xyzw        5     NONE   float   xyzw
; ATTRIBUTE               15   xyzw        6     NONE   float   xyzw
; ATTRIBUTE                5   xy          7     NONE   float   xy  
; ATTRIBUTE               13   xyzw        8     NONE   float       
; ATTRIBUTE               16   x           9     NONE    uint   x   
; SV_InstanceID            0   x          10   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD10_centroid      0   xyzw        1     NONE   float   xyzw
; TEXCOORD11_centroid      0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xyzw        3     NONE   float   xyzw
; PRIMITIVE_ID             0   x           4     NONE    uint   x   
; TEXCOORD                 6   xyzw        5     NONE   float   xyzw
; TEXCOORD                 7   xyz         6     NONE   float   xyz 
;
; shader hash: 836026d8ef5dea1d50347d9aa23ef897
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; ATTRIBUTE                0                              
; ATTRIBUTE                1                              
; ATTRIBUTE                2                              
; ATTRIBUTE                3                              
; ATTRIBUTE               14                              
; ATTRIBUTE                4                              
; ATTRIBUTE               15                              
; ATTRIBUTE                5                              
; ATTRIBUTE               13                              
; ATTRIBUTE               16                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD10_centroid      0                 linear       
; TEXCOORD11_centroid      0                 linear       
; TEXCOORD                 0                 linear       
; PRIMITIVE_ID             0        nointerpolation       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct $Globals
;   {
;
;       float4 DepthOfFieldParams;                    ; Offset:    0
;       uint bSceneLightingChannelsValid;             ; Offset:   16
;       uint PerBoneMotionBlur;                       ; Offset:   20
;       uint NumBoneInfluencesParam;                  ; Offset:   24
;   
;   } $Globals;                                       ; Offset:    0 Size:    28
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       float4 View_PolarisCharacterLightMainColorScale;; Offset: 4560
;       float4 View_PolarisCharacterLightEnvColorScale;; Offset: 4576
;       uint View_PolarisContactShadowMask;           ; Offset: 4592
;       float View_PolarisTAAVelocityWeight;          ; Offset: 4596
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint View_bShadingEnergyConservation;         ; Offset: 5144
;       uint View_bShadingEnergyPreservation;         ; Offset: 5148
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_WaterData;         ; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5248
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5264
;       float PrePadding_View_5268;                   ; Offset: 5268
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint PrePadding_View_5288;                    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5296
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5376
;       uint PrePadding_View_5380;                    ; Offset: 5380
;       uint PrePadding_View_5384;                    ; Offset: 5384
;       uint PrePadding_View_5388;                    ; Offset: 5388
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5392
;       float PrePadding_View_5404;                   ; Offset: 5404
;       float3 View_TLASViewTilePosition;             ; Offset: 5408
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5420
;
; }
;
; cbuffer UniformBufferConstants_MaterialCollection0
; {
;
;   struct UniformBufferConstants_MaterialCollection0
;   {
;
;       float4 MaterialCollection0_Vectors[18];       ; Offset:    0
;   
;   } UniformBufferConstants_MaterialCollection0;     ; Offset:    0 Size:   288
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[23];          ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  368
;       uint PrePadding_Material_372;                 ; Offset:  372
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  376
;       uint PrePadding_Material_380;                 ; Offset:  380
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  384
;       uint PrePadding_Material_388;                 ; Offset:  388
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  392
;       uint PrePadding_Material_396;                 ; Offset:  396
;       uint BindlessResource_Material_Texture2D_2;   ; Offset:  400
;       uint PrePadding_Material_404;                 ; Offset:  404
;       uint BindlessSampler_Material_Texture2D_2Sampler;; Offset:  408
;       uint PrePadding_Material_412;                 ; Offset:  412
;       uint BindlessResource_Material_Texture2D_3;   ; Offset:  416
;       uint PrePadding_Material_420;                 ; Offset:  420
;       uint BindlessSampler_Material_Texture2D_3Sampler;; Offset:  424
;       uint PrePadding_Material_428;                 ; Offset:  428
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  432
;       uint PrePadding_Material_436;                 ; Offset:  436
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  440
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   444
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for InstanceCulling_InstanceIdsBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_MaterialCollection0   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; InstanceCulling_InstanceIdsBuffer   texture  struct         r/o      T2             t2     1
; BoneMatrices                      texture     f32         buf      T3             t3     1
;
;
; ViewId state:
;
; Number of inputs: 41, outputs: 27
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 1 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 2 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 3 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 4 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 5 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 6 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 8 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 9 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 10 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 11 depends on inputs: { 11, 36, 40 }
;   output 12 depends on inputs: { 28 }
;   output 13 depends on inputs: { 29 }
;   output 16 depends on inputs: { 36, 40 }
;   output 20 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 21 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 22 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 24 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 25 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;   output 26 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 40 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"$Globals" = type { <4 x float>, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, <4 x float>, <4 x float>, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_MaterialCollection0 = type { [18 x <4 x float>] }
%UniformBufferConstants_Material = type { [23 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

define void @Main() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 13, i32 444 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %10 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 13, i32 288 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %11 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 13, i32 5420 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %12 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 13, i32 28 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 3, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef), !dx.precise !26  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.f32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.f32 %43, 1
  %46 = extractvalue %dx.types.CBufRet.f32 %43, 2
  %47 = extractvalue %dx.types.CBufRet.f32 %43, 3
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = extractvalue %dx.types.CBufRet.f32 %53, 3
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = extractvalue %dx.types.CBufRet.f32 %58, 3
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = fsub float -0.000000e+00, %64
  %72 = fsub float -0.000000e+00, %65
  %73 = fsub float -0.000000e+00, %66
  %74 = icmp slt i32 %14, 0
  br i1 %74, label %75, label %83

; <label>:75                                      ; preds = %0
  %76 = and i32 %14, 2147483647
  %77 = mul i32 %76, 41
  %78 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %79 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %78, i32 %77, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %80 = extractvalue %dx.types.ResRet.f32 %79, 1
  %81 = bitcast float %80 to i32
  %82 = add i32 %81, %13
  br label %89

; <label>:83                                      ; preds = %0
  %84 = add i32 %14, %13
  %85 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %86 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %85, i32 %84, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %87 = extractvalue %dx.types.ResRet.i32 %86, 0
  %88 = and i32 %87, 268435455
  br label %89

; <label>:89                                      ; preds = %83, %75
  %90 = phi i32 [ %82, %75 ], [ %88, %83 ]
  %91 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.i32 %91, 0
  %93 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %94 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %93, i32 %90, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = bitcast float %95 to i32
  %97 = and i32 %96, 1048575
  %98 = icmp eq i32 %97, 1048575
  %99 = mul nuw nsw i32 %97, 41
  br i1 %98, label %217, label %100, !dx.controlflow.hints !58

; <label>:100                                     ; preds = %89
  %101 = add nuw nsw i32 %99, 1
  %102 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %103 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %102, i32 %101, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %104 = extractvalue %dx.types.ResRet.f32 %103, 0
  %105 = extractvalue %dx.types.ResRet.f32 %103, 1
  %106 = extractvalue %dx.types.ResRet.f32 %103, 2
  %107 = add i32 %92, %90
  %108 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %93, i32 %107, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %109 = extractvalue %dx.types.ResRet.f32 %108, 0
  %110 = extractvalue %dx.types.ResRet.f32 %108, 1
  %111 = extractvalue %dx.types.ResRet.f32 %108, 2
  %112 = extractvalue %dx.types.ResRet.f32 %108, 3
  %113 = bitcast float %109 to i32
  %114 = bitcast float %110 to i32
  %115 = bitcast float %111 to i32
  %116 = bitcast float %112 to i32
  %117 = shl i32 %92, 1
  %118 = add i32 %117, %90
  %119 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %93, i32 %118, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %120 = extractvalue %dx.types.ResRet.f32 %119, 0
  %121 = extractvalue %dx.types.ResRet.f32 %119, 1
  %122 = extractvalue %dx.types.ResRet.f32 %119, 2
  %123 = and i32 %113, 65535
  %124 = uitofp i32 %123 to float
  %125 = lshr i32 %113, 16
  %126 = uitofp i32 %125 to float
  %127 = and i32 %114, 32767
  %128 = uitofp i32 %127 to float
  %129 = fadd float %124, -3.276800e+04
  %130 = fadd float %126, -3.276800e+04
  %131 = fmul float %129, 0x3F00002000000000
  %132 = fmul float %130, 0x3F00002000000000
  %133 = fadd float %128, -1.638400e+04
  %134 = fmul float %133, 0x3F06A0F8E0000000
  %135 = and i32 %114, 32768
  %136 = icmp ne i32 %135, 0
  %137 = fadd float %131, %132
  %138 = fsub float %131, %132
  %139 = call float @dx.op.unary.f32(i32 6, float %137), !dx.precise !26  ; FAbs(value)
  %140 = call float @dx.op.unary.f32(i32 6, float %138), !dx.precise !26  ; FAbs(value)
  %141 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %139, float %140), !dx.precise !26  ; Dot2(ax,ay,bx,by)
  %142 = fsub float 2.000000e+00, %141
  %143 = call float @dx.op.dot3.f32(i32 55, float %137, float %138, float %142, float %137, float %138, float %142), !dx.precise !26  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = call float @dx.op.unary.f32(i32 25, float %143), !dx.precise !26  ; Rsqrt(value)
  %145 = fmul float %137, %144
  %146 = fmul float %138, %144
  %147 = fmul float %142, %144
  %148 = fadd float %147, 1.000000e+00
  %149 = fdiv float 1.000000e+00, %148
  %150 = fmul float %145, %146
  %151 = fmul float %149, %150
  %152 = fsub float -0.000000e+00, %151
  %153 = fmul float %145, %145
  %154 = fmul float %149, %153
  %155 = fsub float 1.000000e+00, %154
  %156 = fmul float %146, %146
  %157 = fmul float %149, %156
  %158 = fsub float 1.000000e+00, %157
  %159 = fmul float %134, %134
  %160 = fsub float 1.000000e+00, %159
  %161 = call float @dx.op.unary.f32(i32 24, float %160), !dx.precise !26  ; Sqrt(value)
  %162 = select i1 %136, float %134, float %161
  %163 = select i1 %136, float %161, float %134
  %164 = fmul float %162, %155
  %165 = fmul float %162, %152
  %166 = fmul float %145, %162
  %167 = fmul float %163, %152
  %168 = fmul float %163, %158
  %169 = fmul float %146, %163
  %170 = fsub float -0.000000e+00, %169
  %171 = fadd float %167, %164
  %172 = fadd float %165, %168
  %173 = fsub float %170, %166
  %174 = fmul float %146, %173
  %175 = fmul float %147, %172
  %176 = fsub float %174, %175
  %177 = fmul float %147, %171
  %178 = fmul float %145, %173
  %179 = fsub float %177, %178
  %180 = fmul float %145, %172
  %181 = fmul float %146, %171
  %182 = fsub float %180, %181
  %183 = lshr i32 %116, 16
  %184 = shl i32 %183, 23
  %185 = add i32 %184, -125829120
  %186 = bitcast i32 %185 to float
  %187 = lshr i32 %115, 16
  %188 = and i32 %115, 65535
  %189 = and i32 %116, 65535
  %190 = uitofp i32 %188 to float
  %191 = uitofp i32 %187 to float
  %192 = uitofp i32 %189 to float
  %193 = fadd float %190, -3.276800e+04
  %194 = fadd float %191, -3.276800e+04
  %195 = fadd float %192, -3.276800e+04
  %196 = fmul float %193, %186
  %197 = fmul float %194, %186
  %198 = fmul float %195, %186
  %199 = fmul float %196, %171
  %200 = fmul float %196, %172
  %201 = fmul float %196, %173
  %202 = fmul float %197, %176
  %203 = fmul float %197, %179
  %204 = fmul float %197, %182
  %205 = fmul float %198, %145
  %206 = fmul float %198, %146
  %207 = fmul float %198, %147
  %208 = call float @dx.op.unary.f32(i32 6, float %196)  ; FAbs(value)
  %209 = call float @dx.op.unary.f32(i32 6, float %197)  ; FAbs(value)
  %210 = call float @dx.op.unary.f32(i32 6, float %198)  ; FAbs(value)
  %211 = fdiv fast float 1.000000e+00, %208
  %212 = fdiv fast float 1.000000e+00, %209
  %213 = fdiv fast float 1.000000e+00, %210
  %214 = and i32 %96, 1048576
  %215 = icmp ne i32 %214, 0
  %216 = select i1 %215, float -1.000000e+00, float 1.000000e+00
  br label %217

; <label>:217                                     ; preds = %100, %89
  %218 = phi float [ %199, %100 ], [ 0.000000e+00, %89 ]
  %219 = phi float [ %200, %100 ], [ 0.000000e+00, %89 ]
  %220 = phi float [ %201, %100 ], [ 0.000000e+00, %89 ]
  %221 = phi float [ %202, %100 ], [ 0.000000e+00, %89 ]
  %222 = phi float [ %203, %100 ], [ 0.000000e+00, %89 ]
  %223 = phi float [ %204, %100 ], [ 0.000000e+00, %89 ]
  %224 = phi float [ %205, %100 ], [ 0.000000e+00, %89 ]
  %225 = phi float [ %206, %100 ], [ 0.000000e+00, %89 ]
  %226 = phi float [ %207, %100 ], [ 0.000000e+00, %89 ]
  %227 = phi float [ %120, %100 ], [ 0.000000e+00, %89 ]
  %228 = phi float [ %121, %100 ], [ 0.000000e+00, %89 ]
  %229 = phi float [ %122, %100 ], [ 0.000000e+00, %89 ]
  %230 = phi float [ %104, %100 ], [ 0.000000e+00, %89 ]
  %231 = phi float [ %105, %100 ], [ 0.000000e+00, %89 ]
  %232 = phi float [ %106, %100 ], [ 0.000000e+00, %89 ]
  %233 = phi float [ %211, %100 ], [ 0.000000e+00, %89 ]
  %234 = phi float [ %212, %100 ], [ 0.000000e+00, %89 ]
  %235 = phi float [ %213, %100 ], [ 0.000000e+00, %89 ]
  %236 = phi float [ %216, %100 ], [ 0.000000e+00, %89 ]
  %237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %238 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %237, i32 %99, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %239 = extractvalue %dx.types.ResRet.f32 %238, 0
  %240 = bitcast float %239 to i32
  %241 = add nuw nsw i32 %99, 31
  %242 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %237, i32 %241, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %243 = extractvalue %dx.types.ResRet.f32 %242, 0
  %244 = mul nsw i32 %29, 3
  %245 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %246 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %244, i32 undef)  ; BufferLoad(srv,index,wot)
  %247 = extractvalue %dx.types.ResRet.f32 %246, 0
  %248 = extractvalue %dx.types.ResRet.f32 %246, 1
  %249 = extractvalue %dx.types.ResRet.f32 %246, 2
  %250 = extractvalue %dx.types.ResRet.f32 %246, 3
  %251 = add nsw i32 %244, 1
  %252 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %251, i32 undef)  ; BufferLoad(srv,index,wot)
  %253 = extractvalue %dx.types.ResRet.f32 %252, 0
  %254 = extractvalue %dx.types.ResRet.f32 %252, 1
  %255 = extractvalue %dx.types.ResRet.f32 %252, 2
  %256 = extractvalue %dx.types.ResRet.f32 %252, 3
  %257 = add nsw i32 %244, 2
  %258 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %257, i32 undef)  ; BufferLoad(srv,index,wot)
  %259 = extractvalue %dx.types.ResRet.f32 %258, 0
  %260 = extractvalue %dx.types.ResRet.f32 %258, 1
  %261 = extractvalue %dx.types.ResRet.f32 %258, 2
  %262 = extractvalue %dx.types.ResRet.f32 %258, 3
  %263 = fmul float %21, %247
  %264 = fmul float %21, %248
  %265 = fmul float %21, %249
  %266 = fmul float %21, %250
  %267 = fmul float %21, %253
  %268 = fmul float %21, %254
  %269 = fmul float %21, %255
  %270 = fmul float %21, %256
  %271 = fmul float %21, %259
  %272 = fmul float %21, %260
  %273 = fmul float %21, %261
  %274 = fmul float %21, %262
  %275 = mul nsw i32 %30, 3
  %276 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %275, i32 undef)  ; BufferLoad(srv,index,wot)
  %277 = extractvalue %dx.types.ResRet.f32 %276, 0
  %278 = extractvalue %dx.types.ResRet.f32 %276, 1
  %279 = extractvalue %dx.types.ResRet.f32 %276, 2
  %280 = extractvalue %dx.types.ResRet.f32 %276, 3
  %281 = add nsw i32 %275, 1
  %282 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %281, i32 undef)  ; BufferLoad(srv,index,wot)
  %283 = extractvalue %dx.types.ResRet.f32 %282, 0
  %284 = extractvalue %dx.types.ResRet.f32 %282, 1
  %285 = extractvalue %dx.types.ResRet.f32 %282, 2
  %286 = extractvalue %dx.types.ResRet.f32 %282, 3
  %287 = add nsw i32 %275, 2
  %288 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %287, i32 undef)  ; BufferLoad(srv,index,wot)
  %289 = extractvalue %dx.types.ResRet.f32 %288, 0
  %290 = extractvalue %dx.types.ResRet.f32 %288, 1
  %291 = extractvalue %dx.types.ResRet.f32 %288, 2
  %292 = extractvalue %dx.types.ResRet.f32 %288, 3
  %293 = fmul float %22, %277
  %294 = fmul float %22, %278
  %295 = fmul float %22, %279
  %296 = fmul float %22, %280
  %297 = fmul float %22, %283
  %298 = fmul float %22, %284
  %299 = fmul float %22, %285
  %300 = fmul float %22, %286
  %301 = fmul float %22, %289
  %302 = fmul float %22, %290
  %303 = fmul float %22, %291
  %304 = fmul float %22, %292
  %305 = fadd float %263, %293
  %306 = fadd float %264, %294
  %307 = fadd float %265, %295
  %308 = fadd float %266, %296
  %309 = fadd float %267, %297
  %310 = fadd float %268, %298
  %311 = fadd float %269, %299
  %312 = fadd float %270, %300
  %313 = fadd float %271, %301
  %314 = fadd float %272, %302
  %315 = fadd float %273, %303
  %316 = fadd float %274, %304
  %317 = mul nsw i32 %31, 3
  %318 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %317, i32 undef)  ; BufferLoad(srv,index,wot)
  %319 = extractvalue %dx.types.ResRet.f32 %318, 0
  %320 = extractvalue %dx.types.ResRet.f32 %318, 1
  %321 = extractvalue %dx.types.ResRet.f32 %318, 2
  %322 = extractvalue %dx.types.ResRet.f32 %318, 3
  %323 = add nsw i32 %317, 1
  %324 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %323, i32 undef)  ; BufferLoad(srv,index,wot)
  %325 = extractvalue %dx.types.ResRet.f32 %324, 0
  %326 = extractvalue %dx.types.ResRet.f32 %324, 1
  %327 = extractvalue %dx.types.ResRet.f32 %324, 2
  %328 = extractvalue %dx.types.ResRet.f32 %324, 3
  %329 = add nsw i32 %317, 2
  %330 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %329, i32 undef)  ; BufferLoad(srv,index,wot)
  %331 = extractvalue %dx.types.ResRet.f32 %330, 0
  %332 = extractvalue %dx.types.ResRet.f32 %330, 1
  %333 = extractvalue %dx.types.ResRet.f32 %330, 2
  %334 = extractvalue %dx.types.ResRet.f32 %330, 3
  %335 = fmul float %23, %319
  %336 = fmul float %23, %320
  %337 = fmul float %23, %321
  %338 = fmul float %23, %322
  %339 = fmul float %23, %325
  %340 = fmul float %23, %326
  %341 = fmul float %23, %327
  %342 = fmul float %23, %328
  %343 = fmul float %23, %331
  %344 = fmul float %23, %332
  %345 = fmul float %23, %333
  %346 = fmul float %23, %334
  %347 = fadd float %305, %335
  %348 = fadd float %306, %336
  %349 = fadd float %307, %337
  %350 = fadd float %308, %338
  %351 = fadd float %309, %339
  %352 = fadd float %310, %340
  %353 = fadd float %311, %341
  %354 = fadd float %312, %342
  %355 = fadd float %313, %343
  %356 = fadd float %314, %344
  %357 = fadd float %315, %345
  %358 = fadd float %316, %346
  %359 = mul nsw i32 %32, 3
  %360 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %359, i32 undef)  ; BufferLoad(srv,index,wot)
  %361 = extractvalue %dx.types.ResRet.f32 %360, 0
  %362 = extractvalue %dx.types.ResRet.f32 %360, 1
  %363 = extractvalue %dx.types.ResRet.f32 %360, 2
  %364 = extractvalue %dx.types.ResRet.f32 %360, 3
  %365 = add nsw i32 %359, 1
  %366 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %365, i32 undef)  ; BufferLoad(srv,index,wot)
  %367 = extractvalue %dx.types.ResRet.f32 %366, 0
  %368 = extractvalue %dx.types.ResRet.f32 %366, 1
  %369 = extractvalue %dx.types.ResRet.f32 %366, 2
  %370 = extractvalue %dx.types.ResRet.f32 %366, 3
  %371 = add nsw i32 %359, 2
  %372 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %371, i32 undef)  ; BufferLoad(srv,index,wot)
  %373 = extractvalue %dx.types.ResRet.f32 %372, 0
  %374 = extractvalue %dx.types.ResRet.f32 %372, 1
  %375 = extractvalue %dx.types.ResRet.f32 %372, 2
  %376 = extractvalue %dx.types.ResRet.f32 %372, 3
  %377 = fmul float %24, %361
  %378 = fmul float %24, %362
  %379 = fmul float %24, %363
  %380 = fmul float %24, %364
  %381 = fmul float %24, %367
  %382 = fmul float %24, %368
  %383 = fmul float %24, %369
  %384 = fmul float %24, %370
  %385 = fmul float %24, %373
  %386 = fmul float %24, %374
  %387 = fmul float %24, %375
  %388 = fmul float %24, %376
  %389 = fadd float %347, %377
  %390 = fadd float %348, %378
  %391 = fadd float %349, %379
  %392 = fadd float %350, %380
  %393 = fadd float %351, %381
  %394 = fadd float %352, %382
  %395 = fadd float %353, %383
  %396 = fadd float %354, %384
  %397 = fadd float %355, %385
  %398 = fadd float %356, %386
  %399 = fadd float %357, %387
  %400 = fadd float %358, %388
  %401 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %12, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %402 = extractvalue %dx.types.CBufRet.i32 %401, 2
  %403 = icmp ugt i32 %402, 4
  br i1 %403, label %404, label %573

; <label>:404                                     ; preds = %217
  %405 = mul nsw i32 %25, 3
  %406 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %405, i32 undef)  ; BufferLoad(srv,index,wot)
  %407 = extractvalue %dx.types.ResRet.f32 %406, 0
  %408 = extractvalue %dx.types.ResRet.f32 %406, 1
  %409 = extractvalue %dx.types.ResRet.f32 %406, 2
  %410 = extractvalue %dx.types.ResRet.f32 %406, 3
  %411 = add nsw i32 %405, 1
  %412 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %411, i32 undef)  ; BufferLoad(srv,index,wot)
  %413 = extractvalue %dx.types.ResRet.f32 %412, 0
  %414 = extractvalue %dx.types.ResRet.f32 %412, 1
  %415 = extractvalue %dx.types.ResRet.f32 %412, 2
  %416 = extractvalue %dx.types.ResRet.f32 %412, 3
  %417 = add nsw i32 %405, 2
  %418 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %417, i32 undef)  ; BufferLoad(srv,index,wot)
  %419 = extractvalue %dx.types.ResRet.f32 %418, 0
  %420 = extractvalue %dx.types.ResRet.f32 %418, 1
  %421 = extractvalue %dx.types.ResRet.f32 %418, 2
  %422 = extractvalue %dx.types.ResRet.f32 %418, 3
  %423 = fmul float %17, %407
  %424 = fmul float %17, %408
  %425 = fmul float %17, %409
  %426 = fmul float %17, %410
  %427 = fmul float %17, %413
  %428 = fmul float %17, %414
  %429 = fmul float %17, %415
  %430 = fmul float %17, %416
  %431 = fmul float %17, %419
  %432 = fmul float %17, %420
  %433 = fmul float %17, %421
  %434 = fmul float %17, %422
  %435 = fadd float %389, %423
  %436 = fadd float %390, %424
  %437 = fadd float %391, %425
  %438 = fadd float %392, %426
  %439 = fadd float %393, %427
  %440 = fadd float %394, %428
  %441 = fadd float %395, %429
  %442 = fadd float %396, %430
  %443 = fadd float %397, %431
  %444 = fadd float %398, %432
  %445 = fadd float %399, %433
  %446 = fadd float %400, %434
  %447 = mul nsw i32 %26, 3
  %448 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %447, i32 undef)  ; BufferLoad(srv,index,wot)
  %449 = extractvalue %dx.types.ResRet.f32 %448, 0
  %450 = extractvalue %dx.types.ResRet.f32 %448, 1
  %451 = extractvalue %dx.types.ResRet.f32 %448, 2
  %452 = extractvalue %dx.types.ResRet.f32 %448, 3
  %453 = add nsw i32 %447, 1
  %454 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %453, i32 undef)  ; BufferLoad(srv,index,wot)
  %455 = extractvalue %dx.types.ResRet.f32 %454, 0
  %456 = extractvalue %dx.types.ResRet.f32 %454, 1
  %457 = extractvalue %dx.types.ResRet.f32 %454, 2
  %458 = extractvalue %dx.types.ResRet.f32 %454, 3
  %459 = add nsw i32 %447, 2
  %460 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %459, i32 undef)  ; BufferLoad(srv,index,wot)
  %461 = extractvalue %dx.types.ResRet.f32 %460, 0
  %462 = extractvalue %dx.types.ResRet.f32 %460, 1
  %463 = extractvalue %dx.types.ResRet.f32 %460, 2
  %464 = extractvalue %dx.types.ResRet.f32 %460, 3
  %465 = fmul float %18, %449
  %466 = fmul float %18, %450
  %467 = fmul float %18, %451
  %468 = fmul float %18, %452
  %469 = fmul float %18, %455
  %470 = fmul float %18, %456
  %471 = fmul float %18, %457
  %472 = fmul float %18, %458
  %473 = fmul float %18, %461
  %474 = fmul float %18, %462
  %475 = fmul float %18, %463
  %476 = fmul float %18, %464
  %477 = fadd float %435, %465
  %478 = fadd float %436, %466
  %479 = fadd float %437, %467
  %480 = fadd float %438, %468
  %481 = fadd float %439, %469
  %482 = fadd float %440, %470
  %483 = fadd float %441, %471
  %484 = fadd float %442, %472
  %485 = fadd float %443, %473
  %486 = fadd float %444, %474
  %487 = fadd float %445, %475
  %488 = fadd float %446, %476
  %489 = mul nsw i32 %27, 3
  %490 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %489, i32 undef)  ; BufferLoad(srv,index,wot)
  %491 = extractvalue %dx.types.ResRet.f32 %490, 0
  %492 = extractvalue %dx.types.ResRet.f32 %490, 1
  %493 = extractvalue %dx.types.ResRet.f32 %490, 2
  %494 = extractvalue %dx.types.ResRet.f32 %490, 3
  %495 = add nsw i32 %489, 1
  %496 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %495, i32 undef)  ; BufferLoad(srv,index,wot)
  %497 = extractvalue %dx.types.ResRet.f32 %496, 0
  %498 = extractvalue %dx.types.ResRet.f32 %496, 1
  %499 = extractvalue %dx.types.ResRet.f32 %496, 2
  %500 = extractvalue %dx.types.ResRet.f32 %496, 3
  %501 = add nsw i32 %489, 2
  %502 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %501, i32 undef)  ; BufferLoad(srv,index,wot)
  %503 = extractvalue %dx.types.ResRet.f32 %502, 0
  %504 = extractvalue %dx.types.ResRet.f32 %502, 1
  %505 = extractvalue %dx.types.ResRet.f32 %502, 2
  %506 = extractvalue %dx.types.ResRet.f32 %502, 3
  %507 = fmul float %19, %491
  %508 = fmul float %19, %492
  %509 = fmul float %19, %493
  %510 = fmul float %19, %494
  %511 = fmul float %19, %497
  %512 = fmul float %19, %498
  %513 = fmul float %19, %499
  %514 = fmul float %19, %500
  %515 = fmul float %19, %503
  %516 = fmul float %19, %504
  %517 = fmul float %19, %505
  %518 = fmul float %19, %506
  %519 = fadd float %477, %507
  %520 = fadd float %478, %508
  %521 = fadd float %479, %509
  %522 = fadd float %480, %510
  %523 = fadd float %481, %511
  %524 = fadd float %482, %512
  %525 = fadd float %483, %513
  %526 = fadd float %484, %514
  %527 = fadd float %485, %515
  %528 = fadd float %486, %516
  %529 = fadd float %487, %517
  %530 = fadd float %488, %518
  %531 = mul nsw i32 %28, 3
  %532 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %531, i32 undef)  ; BufferLoad(srv,index,wot)
  %533 = extractvalue %dx.types.ResRet.f32 %532, 0
  %534 = extractvalue %dx.types.ResRet.f32 %532, 1
  %535 = extractvalue %dx.types.ResRet.f32 %532, 2
  %536 = extractvalue %dx.types.ResRet.f32 %532, 3
  %537 = add nsw i32 %531, 1
  %538 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %537, i32 undef)  ; BufferLoad(srv,index,wot)
  %539 = extractvalue %dx.types.ResRet.f32 %538, 0
  %540 = extractvalue %dx.types.ResRet.f32 %538, 1
  %541 = extractvalue %dx.types.ResRet.f32 %538, 2
  %542 = extractvalue %dx.types.ResRet.f32 %538, 3
  %543 = add nsw i32 %531, 2
  %544 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %245, i32 %543, i32 undef)  ; BufferLoad(srv,index,wot)
  %545 = extractvalue %dx.types.ResRet.f32 %544, 0
  %546 = extractvalue %dx.types.ResRet.f32 %544, 1
  %547 = extractvalue %dx.types.ResRet.f32 %544, 2
  %548 = extractvalue %dx.types.ResRet.f32 %544, 3
  %549 = fmul float %20, %533
  %550 = fmul float %20, %534
  %551 = fmul float %20, %535
  %552 = fmul float %20, %536
  %553 = fmul float %20, %539
  %554 = fmul float %20, %540
  %555 = fmul float %20, %541
  %556 = fmul float %20, %542
  %557 = fmul float %20, %545
  %558 = fmul float %20, %546
  %559 = fmul float %20, %547
  %560 = fmul float %20, %548
  %561 = fadd float %519, %549
  %562 = fadd float %520, %550
  %563 = fadd float %521, %551
  %564 = fadd float %522, %552
  %565 = fadd float %523, %553
  %566 = fadd float %524, %554
  %567 = fadd float %525, %555
  %568 = fadd float %526, %556
  %569 = fadd float %527, %557
  %570 = fadd float %528, %558
  %571 = fadd float %529, %559
  %572 = fadd float %530, %560
  br label %573

; <label>:573                                     ; preds = %404, %217
  %574 = phi float [ %561, %404 ], [ %389, %217 ]
  %575 = phi float [ %562, %404 ], [ %390, %217 ]
  %576 = phi float [ %563, %404 ], [ %391, %217 ]
  %577 = phi float [ %564, %404 ], [ %392, %217 ]
  %578 = phi float [ %565, %404 ], [ %393, %217 ]
  %579 = phi float [ %566, %404 ], [ %394, %217 ]
  %580 = phi float [ %567, %404 ], [ %395, %217 ]
  %581 = phi float [ %568, %404 ], [ %396, %217 ]
  %582 = phi float [ %569, %404 ], [ %397, %217 ]
  %583 = phi float [ %570, %404 ], [ %398, %217 ]
  %584 = phi float [ %571, %404 ], [ %399, %217 ]
  %585 = phi float [ %572, %404 ], [ %400, %217 ]
  %586 = fmul fast float %574, %37
  %587 = call float @dx.op.tertiary.f32(i32 46, float %575, float %38, float %586)  ; FMad(a,b,c)
  %588 = call float @dx.op.tertiary.f32(i32 46, float %576, float %39, float %587)  ; FMad(a,b,c)
  %589 = fmul fast float %578, %37
  %590 = call float @dx.op.tertiary.f32(i32 46, float %579, float %38, float %589)  ; FMad(a,b,c)
  %591 = call float @dx.op.tertiary.f32(i32 46, float %580, float %39, float %590)  ; FMad(a,b,c)
  %592 = fmul fast float %582, %37
  %593 = call float @dx.op.tertiary.f32(i32 46, float %583, float %38, float %592)  ; FMad(a,b,c)
  %594 = call float @dx.op.tertiary.f32(i32 46, float %584, float %39, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.dot3.f32(i32 55, float %588, float %591, float %594, float %588, float %591, float %594)  ; Dot3(ax,ay,az,bx,by,bz)
  %596 = call float @dx.op.unary.f32(i32 25, float %595)  ; Rsqrt(value)
  %597 = fmul fast float %596, %588
  %598 = fmul fast float %596, %591
  %599 = fmul fast float %596, %594
  %600 = fmul fast float %574, %33
  %601 = call float @dx.op.tertiary.f32(i32 46, float %575, float %34, float %600)  ; FMad(a,b,c)
  %602 = call float @dx.op.tertiary.f32(i32 46, float %576, float %35, float %601)  ; FMad(a,b,c)
  %603 = fmul fast float %578, %33
  %604 = call float @dx.op.tertiary.f32(i32 46, float %579, float %34, float %603)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %580, float %35, float %604)  ; FMad(a,b,c)
  %606 = fmul fast float %582, %33
  %607 = call float @dx.op.tertiary.f32(i32 46, float %583, float %34, float %606)  ; FMad(a,b,c)
  %608 = call float @dx.op.tertiary.f32(i32 46, float %584, float %35, float %607)  ; FMad(a,b,c)
  %609 = call float @dx.op.dot3.f32(i32 55, float %602, float %605, float %608, float %602, float %605, float %608)  ; Dot3(ax,ay,az,bx,by,bz)
  %610 = call float @dx.op.unary.f32(i32 25, float %609)  ; Rsqrt(value)
  %611 = fmul fast float %610, %602
  %612 = fmul fast float %610, %605
  %613 = fmul fast float %610, %608
  %614 = fmul float %40, %574
  %615 = call float @dx.op.tertiary.f32(i32 46, float %575, float %41, float %614), !dx.precise !26  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %576, float %42, float %615), !dx.precise !26  ; FMad(a,b,c)
  %617 = call float @dx.op.tertiary.f32(i32 46, float %577, float 1.000000e+00, float %616), !dx.precise !26  ; FMad(a,b,c)
  %618 = fmul float %40, %578
  %619 = call float @dx.op.tertiary.f32(i32 46, float %579, float %41, float %618), !dx.precise !26  ; FMad(a,b,c)
  %620 = call float @dx.op.tertiary.f32(i32 46, float %580, float %42, float %619), !dx.precise !26  ; FMad(a,b,c)
  %621 = call float @dx.op.tertiary.f32(i32 46, float %581, float 1.000000e+00, float %620), !dx.precise !26  ; FMad(a,b,c)
  %622 = fmul float %40, %582
  %623 = call float @dx.op.tertiary.f32(i32 46, float %583, float %41, float %622), !dx.precise !26  ; FMad(a,b,c)
  %624 = call float @dx.op.tertiary.f32(i32 46, float %584, float %42, float %623), !dx.precise !26  ; FMad(a,b,c)
  %625 = call float @dx.op.tertiary.f32(i32 46, float %585, float 1.000000e+00, float %624), !dx.precise !26  ; FMad(a,b,c)
  %626 = fmul float %218, %617
  %627 = fmul float %219, %617
  %628 = fmul float %220, %617
  %629 = fmul float %221, %621
  %630 = fmul float %222, %621
  %631 = fmul float %223, %621
  %632 = fadd float %626, %629
  %633 = fadd float %627, %630
  %634 = fadd float %628, %631
  %635 = fmul float %224, %625
  %636 = fmul float %225, %625
  %637 = fmul float %226, %625
  %638 = fadd float %632, %635
  %639 = fadd float %633, %636
  %640 = fadd float %634, %637
  %641 = fadd float %68, %227
  %642 = fadd float %69, %228
  %643 = fadd float %70, %229
  %644 = fsub float %230, %64
  %645 = fsub float %231, %65
  %646 = fsub float %232, %66
  %647 = fmul float %644, 2.097152e+06
  %648 = fmul float %645, 2.097152e+06
  %649 = fmul float %646, 2.097152e+06
  %650 = fadd float %641, %647
  %651 = fadd float %642, %648
  %652 = fadd float %643, %649
  %653 = fadd float %650, %638
  %654 = fadd float %651, %639
  %655 = fadd float %652, %640
  %656 = and i32 %240, 32768
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %882, label %658, !dx.controlflow.hints !59

; <label>:658                                     ; preds = %573
  %659 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %660 = extractvalue %dx.types.CBufRet.f32 %659, 0
  %661 = extractvalue %dx.types.CBufRet.f32 %659, 1
  %662 = extractvalue %dx.types.CBufRet.f32 %659, 2
  %663 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %664 = extractvalue %dx.types.CBufRet.f32 %663, 0
  %665 = extractvalue %dx.types.CBufRet.f32 %663, 1
  %666 = extractvalue %dx.types.CBufRet.f32 %663, 2
  %667 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %668 = extractvalue %dx.types.CBufRet.f32 %667, 0
  %669 = fsub float %664, %660
  %670 = fsub float %665, %661
  %671 = fsub float %666, %662
  %672 = fmul float %668, %669
  %673 = fmul float %668, %670
  %674 = fmul float %668, %671
  %675 = fadd float %660, %672
  %676 = fadd float %661, %673
  %677 = fadd float %662, %674
  %678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %679 = extractvalue %dx.types.CBufRet.f32 %678, 0
  %680 = extractvalue %dx.types.CBufRet.f32 %678, 1
  %681 = extractvalue %dx.types.CBufRet.f32 %678, 2
  %682 = extractvalue %dx.types.CBufRet.f32 %667, 1
  %683 = fsub float %679, %675
  %684 = fsub float %680, %676
  %685 = fsub float %681, %677
  %686 = fmul float %682, %683
  %687 = fmul float %682, %684
  %688 = fmul float %682, %685
  %689 = fadd float %675, %686
  %690 = fadd float %676, %687
  %691 = fadd float %677, %688
  %692 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %693 = extractvalue %dx.types.CBufRet.f32 %692, 0
  %694 = extractvalue %dx.types.CBufRet.f32 %692, 1
  %695 = extractvalue %dx.types.CBufRet.f32 %692, 2
  %696 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %697 = extractvalue %dx.types.CBufRet.f32 %696, 0
  %698 = extractvalue %dx.types.CBufRet.f32 %696, 1
  %699 = extractvalue %dx.types.CBufRet.f32 %696, 2
  %700 = fsub float %697, %693
  %701 = fsub float %698, %694
  %702 = fsub float %699, %695
  %703 = fmul float %668, %700
  %704 = fmul float %668, %701
  %705 = fmul float %668, %702
  %706 = fadd float %693, %703
  %707 = fadd float %694, %704
  %708 = fadd float %695, %705
  %709 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %710 = extractvalue %dx.types.CBufRet.f32 %709, 0
  %711 = extractvalue %dx.types.CBufRet.f32 %709, 1
  %712 = extractvalue %dx.types.CBufRet.f32 %709, 2
  %713 = fsub float %710, %706
  %714 = fsub float %711, %707
  %715 = fsub float %712, %708
  %716 = fmul float %682, %713
  %717 = fmul float %682, %714
  %718 = fmul float %682, %715
  %719 = fadd float %706, %716
  %720 = fadd float %707, %717
  %721 = fadd float %708, %718
  %722 = extractvalue %dx.types.CBufRet.f32 %667, 2
  %723 = fsub float %719, %689
  %724 = fsub float %720, %690
  %725 = fsub float %721, %691
  %726 = fmul float %722, %723
  %727 = fmul float %722, %724
  %728 = fmul float %722, %725
  %729 = fadd float %689, %726
  %730 = fadd float %690, %727
  %731 = fadd float %691, %728
  %732 = fsub float %653, %68
  %733 = fsub float %654, %69
  %734 = fsub float %655, %70
  %735 = fsub float %729, %732
  %736 = fsub float %730, %733
  %737 = fsub float %731, %734
  %738 = fmul float %735, 0x3EA0000000000000
  %739 = fmul float %735, %738
  %740 = fmul float %738, 2.000000e+00
  %741 = fsub float %740, %64
  %742 = fmul float %741, %71
  %743 = fmul float %736, 0x3EA0000000000000
  %744 = fmul float %736, %743
  %745 = fmul float %743, 2.000000e+00
  %746 = fsub float %745, %65
  %747 = fmul float %746, %72
  %748 = fmul float %737, 0x3EA0000000000000
  %749 = fmul float %737, %748
  %750 = fmul float %748, 2.000000e+00
  %751 = fsub float %750, %66
  %752 = fmul float %751, %73
  %753 = fadd float %739, %744
  %754 = fadd float %742, %747
  %755 = fadd float %749, %753
  %756 = fadd float %752, %754
  %757 = fmul float %755, 0x3EA0000000000000
  %758 = fadd float %757, %756
  %759 = call float @dx.op.unary.f32(i32 25, float %758), !dx.precise !26  ; Rsqrt(value)
  %760 = fmul float %759, 0x3EA0000000000000
  %761 = fmul float %760, %735
  %762 = fmul float %760, %736
  %763 = fmul float %760, %737
  %764 = fmul float %760, %71
  %765 = fmul float %760, %72
  %766 = fmul float %760, %73
  %767 = fmul float %764, 2.097152e+06
  %768 = fmul float %765, 2.097152e+06
  %769 = fmul float %766, 2.097152e+06
  %770 = fadd float %767, %761
  %771 = fadd float %768, %762
  %772 = fadd float %769, %763
  %773 = fsub float %732, %729
  %774 = fsub float %733, %730
  %775 = fsub float %734, %731
  %776 = fmul float %773, 0x3EA0000000000000
  %777 = fmul float %773, %776
  %778 = fmul float %776, 2.000000e+00
  %779 = fadd float %64, %778
  %780 = fmul float %64, %779
  %781 = fmul float %774, 0x3EA0000000000000
  %782 = fmul float %774, %781
  %783 = fmul float %781, 2.000000e+00
  %784 = fadd float %65, %783
  %785 = fmul float %65, %784
  %786 = fmul float %775, 0x3EA0000000000000
  %787 = fmul float %775, %786
  %788 = fmul float %786, 2.000000e+00
  %789 = fadd float %66, %788
  %790 = fmul float %66, %789
  %791 = fadd float %777, %782
  %792 = fadd float %780, %785
  %793 = fadd float %787, %791
  %794 = fadd float %790, %792
  %795 = fmul float %793, 0x3EA0000000000000
  %796 = fadd float %795, %794
  %797 = call float @dx.op.unary.f32(i32 24, float %796), !dx.precise !26  ; Sqrt(value)
  %798 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %799 = extractvalue %dx.types.CBufRet.f32 %798, 0
  %800 = extractvalue %dx.types.CBufRet.f32 %798, 1
  %801 = extractvalue %dx.types.CBufRet.f32 %798, 2
  %802 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %803 = extractvalue %dx.types.CBufRet.f32 %802, 1
  %804 = extractvalue %dx.types.CBufRet.f32 %802, 2
  %805 = extractvalue %dx.types.CBufRet.f32 %802, 3
  %806 = fsub float %805, %800
  %807 = fmul float %668, %806
  %808 = fadd float %800, %807
  %809 = fsub float %803, %808
  %810 = fmul float %682, %809
  %811 = fadd float %808, %810
  %812 = fsub float %799, %801
  %813 = fmul float %812, %668
  %814 = fadd float %801, %813
  %815 = fsub float %804, %814
  %816 = fmul float %682, %815
  %817 = fadd float %814, %816
  %818 = fsub float %817, %811
  %819 = fmul float %722, %818
  %820 = fadd float %811, %819
  %821 = fsub float 0.000000e+00, %820
  %822 = fsub float 0.000000e+00, %797
  %823 = fmul float %822, 2.097152e+06
  %824 = fcmp ogt float %823, %821
  %825 = select i1 %824, float 0.000000e+00, float %821
  %826 = select i1 %824, float 0.000000e+00, float %797
  %827 = fmul float %770, %825
  %828 = fmul float %771, %825
  %829 = fmul float %772, %825
  %830 = fmul float %826, 2.097152e+06
  %831 = fadd float %825, %830
  %832 = fmul float %831, 0.000000e+00
  %833 = fmul float %770, %826
  %834 = fmul float %771, %826
  %835 = fmul float %772, %826
  %836 = fadd float %833, %832
  %837 = fadd float %834, %832
  %838 = fadd float %835, %832
  %839 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %840 = extractvalue %dx.types.CBufRet.f32 %839, 3
  %841 = fmul float %840, %827
  %842 = fmul float %840, %828
  %843 = fmul float %840, %829
  %844 = fadd float %841, 0.000000e+00
  %845 = fadd float %842, 0.000000e+00
  %846 = fadd float %843, 0.000000e+00
  %847 = fmul float %840, %836
  %848 = fmul float %840, %837
  %849 = fmul float %840, %838
  %850 = fadd float %847, 0.000000e+00
  %851 = fadd float %848, 0.000000e+00
  %852 = fadd float %849, 0.000000e+00
  %853 = fmul float %840, %844
  %854 = fmul float %840, %845
  %855 = fmul float %840, %846
  %856 = fadd float %853, 0.000000e+00
  %857 = fadd float %854, 0.000000e+00
  %858 = fadd float %855, 0.000000e+00
  %859 = fmul float %840, %850
  %860 = fmul float %840, %851
  %861 = fmul float %840, %852
  %862 = fadd float %859, 0.000000e+00
  %863 = fadd float %860, 0.000000e+00
  %864 = fadd float %861, 0.000000e+00
  %865 = fmul float %862, 2.097152e+06
  %866 = fmul float %863, 2.097152e+06
  %867 = fmul float %864, 2.097152e+06
  %868 = fadd float %856, %865
  %869 = fadd float %857, %866
  %870 = fadd float %858, %867
  %871 = fcmp ole float %243, 0.000000e+00
  %872 = fsub float -0.000000e+00, %243
  %873 = call float @dx.op.binary.f32(i32 35, float %868, float %872), !dx.precise !26  ; FMax(a,b)
  %874 = call float @dx.op.binary.f32(i32 35, float %869, float %872), !dx.precise !26  ; FMax(a,b)
  %875 = call float @dx.op.binary.f32(i32 35, float %870, float %872), !dx.precise !26  ; FMax(a,b)
  %876 = call float @dx.op.binary.f32(i32 36, float %873, float %243), !dx.precise !26  ; FMin(a,b)
  %877 = call float @dx.op.binary.f32(i32 36, float %874, float %243), !dx.precise !26  ; FMin(a,b)
  %878 = call float @dx.op.binary.f32(i32 36, float %875, float %243), !dx.precise !26  ; FMin(a,b)
  %879 = select i1 %871, float %868, float %876
  %880 = select i1 %871, float %869, float %877
  %881 = select i1 %871, float %870, float %878
  br label %882

; <label>:882                                     ; preds = %658, %573
  %883 = phi float [ %879, %658 ], [ 0.000000e+00, %573 ]
  %884 = phi float [ %880, %658 ], [ 0.000000e+00, %573 ]
  %885 = phi float [ %881, %658 ], [ 0.000000e+00, %573 ]
  %886 = fadd float %653, %883
  %887 = fadd float %654, %884
  %888 = fadd float %655, %885
  %889 = fmul float %44, %886
  %890 = call float @dx.op.tertiary.f32(i32 46, float %887, float %49, float %889), !dx.precise !26  ; FMad(a,b,c)
  %891 = call float @dx.op.tertiary.f32(i32 46, float %888, float %54, float %890), !dx.precise !26  ; FMad(a,b,c)
  %892 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %59, float %891), !dx.precise !26  ; FMad(a,b,c)
  %893 = fmul float %45, %886
  %894 = call float @dx.op.tertiary.f32(i32 46, float %887, float %50, float %893), !dx.precise !26  ; FMad(a,b,c)
  %895 = call float @dx.op.tertiary.f32(i32 46, float %888, float %55, float %894), !dx.precise !26  ; FMad(a,b,c)
  %896 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %60, float %895), !dx.precise !26  ; FMad(a,b,c)
  %897 = fmul float %46, %886
  %898 = call float @dx.op.tertiary.f32(i32 46, float %887, float %51, float %897), !dx.precise !26  ; FMad(a,b,c)
  %899 = call float @dx.op.tertiary.f32(i32 46, float %888, float %56, float %898), !dx.precise !26  ; FMad(a,b,c)
  %900 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %61, float %899), !dx.precise !26  ; FMad(a,b,c)
  %901 = fmul float %47, %886
  %902 = call float @dx.op.tertiary.f32(i32 46, float %887, float %52, float %901), !dx.precise !26  ; FMad(a,b,c)
  %903 = call float @dx.op.tertiary.f32(i32 46, float %888, float %57, float %902), !dx.precise !26  ; FMad(a,b,c)
  %904 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %62, float %903), !dx.precise !26  ; FMad(a,b,c)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %892)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %896)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %900)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %904)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %905 = fmul fast float %233, %218
  %906 = fmul fast float %233, %219
  %907 = fmul fast float %233, %220
  %908 = fmul fast float %234, %221
  %909 = fmul fast float %234, %222
  %910 = fmul fast float %234, %223
  %911 = fmul fast float %235, %224
  %912 = fmul fast float %235, %225
  %913 = fmul fast float %235, %226
  %914 = fmul fast float %597, %905
  %915 = call float @dx.op.tertiary.f32(i32 46, float %598, float %908, float %914)  ; FMad(a,b,c)
  %916 = call float @dx.op.tertiary.f32(i32 46, float %599, float %911, float %915)  ; FMad(a,b,c)
  %917 = fmul fast float %597, %906
  %918 = call float @dx.op.tertiary.f32(i32 46, float %598, float %909, float %917)  ; FMad(a,b,c)
  %919 = call float @dx.op.tertiary.f32(i32 46, float %599, float %912, float %918)  ; FMad(a,b,c)
  %920 = fmul fast float %597, %907
  %921 = call float @dx.op.tertiary.f32(i32 46, float %598, float %910, float %920)  ; FMad(a,b,c)
  %922 = call float @dx.op.tertiary.f32(i32 46, float %599, float %913, float %921)  ; FMad(a,b,c)
  %923 = fmul fast float %611, %905
  %924 = call float @dx.op.tertiary.f32(i32 46, float %612, float %908, float %923)  ; FMad(a,b,c)
  %925 = call float @dx.op.tertiary.f32(i32 46, float %613, float %911, float %924)  ; FMad(a,b,c)
  %926 = fmul fast float %611, %906
  %927 = call float @dx.op.tertiary.f32(i32 46, float %612, float %909, float %926)  ; FMad(a,b,c)
  %928 = call float @dx.op.tertiary.f32(i32 46, float %613, float %912, float %927)  ; FMad(a,b,c)
  %929 = fmul fast float %611, %907
  %930 = call float @dx.op.tertiary.f32(i32 46, float %612, float %910, float %929)  ; FMad(a,b,c)
  %931 = call float @dx.op.tertiary.f32(i32 46, float %613, float %913, float %930)  ; FMad(a,b,c)
  %932 = fmul fast float %236, %36
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %916)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %919)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %922)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %925)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %928)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %931)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %932)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 4, i32 0, i8 0, i32 %97)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %886)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %887)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %888)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %653)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %654)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %655)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!18}
!dx.entryPoints = !{!19}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{!5, null, !13, null}
!5 = !{!6, !8, !9, !11}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !10}
!10 = !{i32 1, i32 4}
!11 = !{i32 3, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 10, i32 0, !12}
!12 = !{i32 0, i32 9}
!13 = !{!14, !15, !16, !17}
!14 = !{i32 0, %"$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 28, null}
!15 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5420, null}
!16 = !{i32 2, %UniformBufferConstants_MaterialCollection0* undef, !"", i32 0, i32 2, i32 1, i32 288, null}
!17 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 444, null}
!18 = !{[43 x i32] [i32 41, i32 27, i32 124780559, i32 124780559, i32 124780559, i32 0, i32 112, i32 112, i32 112, i32 0, i32 1792, i32 1792, i32 1792, i32 2048, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 124782463, i32 4096, i32 8192, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 124850047, i32 0, i32 0, i32 0, i32 124850047]}
!19 = !{void ()* @Main, !"Main", !20, !4, !57}
!20 = !{!21, !47, null}
!21 = !{!22, !25, !27, !30, !32, !34, !36, !38, !41, !43, !46}
!22 = !{i32 0, !"ATTRIBUTE", i8 9, i8 0, !23, i8 0, i32 1, i8 4, i32 0, i8 0, !24}
!23 = !{i32 0}
!24 = !{i32 3, i32 7}
!25 = !{i32 1, !"ATTRIBUTE", i8 9, i8 0, !26, i8 0, i32 1, i8 3, i32 1, i8 0, !24}
!26 = !{i32 1}
!27 = !{i32 2, !"ATTRIBUTE", i8 9, i8 0, !28, i8 0, i32 1, i8 4, i32 2, i8 0, !29}
!28 = !{i32 2}
!29 = !{i32 3, i32 15}
!30 = !{i32 3, !"ATTRIBUTE", i8 5, i8 0, !31, i8 0, i32 1, i8 4, i32 3, i8 0, !29}
!31 = !{i32 3}
!32 = !{i32 4, !"ATTRIBUTE", i8 5, i8 0, !33, i8 0, i32 1, i8 4, i32 4, i8 0, !29}
!33 = !{i32 14}
!34 = !{i32 5, !"ATTRIBUTE", i8 9, i8 0, !35, i8 0, i32 1, i8 4, i32 5, i8 0, !29}
!35 = !{i32 4}
!36 = !{i32 6, !"ATTRIBUTE", i8 9, i8 0, !37, i8 0, i32 1, i8 4, i32 6, i8 0, !29}
!37 = !{i32 15}
!38 = !{i32 7, !"ATTRIBUTE", i8 9, i8 0, !39, i8 0, i32 1, i8 2, i32 7, i8 0, !40}
!39 = !{i32 5}
!40 = !{i32 3, i32 3}
!41 = !{i32 8, !"ATTRIBUTE", i8 9, i8 0, !42, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!42 = !{i32 13}
!43 = !{i32 9, !"ATTRIBUTE", i8 5, i8 0, !44, i8 0, i32 1, i8 1, i32 9, i8 0, !45}
!44 = !{i32 16}
!45 = !{i32 3, i32 1}
!46 = !{i32 10, !"SV_InstanceID", i8 5, i8 2, !23, i8 0, i32 1, i8 1, i32 10, i8 0, !45}
!47 = !{!48, !49, !50, !51, !52, !53, !55}
!48 = !{i32 0, !"SV_Position", i8 9, i8 3, !23, i8 4, i32 1, i8 4, i32 0, i8 0, !29}
!49 = !{i32 1, !"TEXCOORD10_centroid", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !29}
!50 = !{i32 2, !"TEXCOORD11_centroid", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 2, i8 0, !29}
!51 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 3, i8 0, !29}
!52 = !{i32 4, !"PRIMITIVE_ID", i8 5, i8 0, !23, i8 1, i32 1, i8 1, i32 4, i8 0, !45}
!53 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !54, i8 2, i32 1, i8 4, i32 5, i8 0, !29}
!54 = !{i32 6}
!55 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !56, i8 2, i32 1, i8 3, i32 6, i8 0, !24}
!56 = !{i32 7}
!57 = !{i32 0, i64 16, i32 5, !23}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
 